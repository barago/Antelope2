@{
    ViewBag.Title = "Index";
    Layout = "~/Views/QSE/Shared/_Layout.cshtml";
}
<link rel="stylesheet" type="text/css" href="~/Scripts/DataTables-1.10.10/datatables.min.css" />
<script type="text/javascript" src="~/Scripts/DataTables-1.10.10/datatables.min.js"></script>
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="/Scripts/bootstrap-datetimepicker.min.js"></script>


<script type="text/javascript" src="~/Scripts/Application/QSE/NonConformite/NonConformiteModel.js"></script>
<script type="text/javascript" src="/Scripts/Application/Socle/SiteModel.js"></script>
<script type="text/javascript" src="/Scripts/Application/QSE/ActionModel.js"></script>
<script type="text/javascript" src="/Scripts/Application/QSE/NonConformite/Recherche/ViewModel.js"></script>
<script type="text/javascript" src="/Scripts/Application/QSE/NonConformite/Recherche/RechercheNonConformiteParamModel.js"></script>
<script type="text/javascript" src="/Scripts/Application/QSE/NonConformite/Formulaire/RechercheActiveDirectoryModel.js"></script>
<script type="text/javascript" src="/Scripts/Application/QSE/NonConformite/Formulaire/RechercheActiveDirectoryView.js"></script>


@Html.Partial("~/Views/QSE/NonConformite/Index/_RechercheActiveDirectory.cshtml", "RechercheActiveDirectory")
<div id="RechercheActiveDirectoryDiv"></div>

@Html.Partial("~/Views/QSE/NonConformite/Index/_TableFiltre.cshtml", "TableFiltre")
@Html.Partial("~/Views/QSE/NonConformite/Index/_TableRecherche.cshtml", "TableRecherche")
 
<div id="TableFiltreDiv"></div>
<div id="TableRechercheDiv"></div>

<script type="text/javascript">

    $(document).ready(function () {

        var viewModel = new ViewModel();

        viewModel.fetch({
            async: false
        });
        
        viewModel.set({ 'rechercheNonConformiteParamModel': new RechercheNonConformiteParamModel(viewModel.get('RechercheNonConformiteParamModel')) });

        viewModel.set({ 'siteCollection': new SiteCollection(viewModel.get('AllSite')) });
        viewModel.set({ 'nonConformiteDomaineCollection': new SiteCollection(viewModel.get('AllNonConformiteDomaine')) });
        viewModel.set({ 'nonConformiteOrigineCollection': new SiteCollection(viewModel.get('AllNonConformiteOrigine')) });
        viewModel.set({ 'nonConformiteGraviteCollection': new SiteCollection(viewModel.get('AllNonConformiteGravite')) });
        viewModel.set({'serviceTypeCollection': new SiteCollection(viewModel.get('AllServiceType')) });


        viewModel.get('rechercheNonConformiteParamModel').set({ 'DateButoirDebutJavascript': dateTimeUtils.dateFormatJS(viewModel.get('rechercheNonConformiteParamModel').get('DateButoirDebut')) });
        viewModel.get('rechercheNonConformiteParamModel').set({ 'DateButoirFinJavascript': dateTimeUtils.dateFormatJS(viewModel.get('rechercheNonConformiteParamModel').get('DateButoirFin')) });

        viewModel.get('rechercheNonConformiteParamModel').set({ 'typeRecherche': 'ACTION' });

        Backbone.applicationEvents = _.extend({}, Backbone.Events);

        var FiltreTableView = Backbone.View.extend({
            id: 'FiltreTableNonConformite',
            template: _.template($('#TableFiltre').html()),
            render: function () {

                this.$el.html(this.template(this.model.toJSON()));

                $('#DateButoirDebut').datetimepicker({
                    pickTime: false,
                    language: 'fr'
                });
                $('#DateButoirFin').datetimepicker({
                    pickTime: false,
                    language: 'fr'
                });

                $('#DateButoirDebut').on("dp.change", $.proxy(this.changeDateButoirDebut, this));
                $('#DateButoirDebut').on("dp.hide", $.proxy(this.changeDateButoirDebut, this));
                $('#DateButoirFin').on("dp.change", $.proxy(this.changeDateButoirFin, this));
                $('#DateButoirFin').on("dp.hide", $.proxy(this.changeDateButoirFin, this));

                return this;
            },
            fillUtilisateur: function (params) {
                console.log(params[0]);
                switch (params[0].get('sourceUtilisateurField')) {
                    case "ActionResponsable":
                        console.log('toto');

                        this.model.get('rechercheNonConformiteParamModel').set({ 'Responsable': params[0] });

                        this.model.get('rechercheNonConformiteParamModel').set({ 'ResponsableNom': params[0].get('Nom') });
                        this.model.get('rechercheNonConformiteParamModel').set({ 'ResponsablePrenom': params[0].get('Prenom') });
                        this.model.get('rechercheNonConformiteParamModel').set({ 'ResponsableId': params[0].get('PersonneId') });

                        $('#ResponsableNom').val(this.model.get('rechercheNonConformiteParamModel').get('Responsable').get('Nom'));
                        $('#ResponsablePrenom').val(this.model.get('rechercheNonConformiteParamModel').get('Responsable').get('Prenom'));
                         
                        break;

                }
            },
            initialize: function () {

                Backbone.applicationEvents.on('selectionUtilisateur', function (params) {
                    this.fillUtilisateur(params);
                }, this);

                this.render();

            },
            events: {
                "change #Site": "changeSite",
                "change #ServiceType":"changeServiceType",
                "change #Origine": "changeOrigine",
                "change #Domaine": "changeDomaine",
                "change #Gravite": "changeGravite",
                "change #ActionCode": "changeActionCode",
                "change #NonConformiteCode": "changeNonConformiteCode",
                "click #RechercheBouton": "recherche",
                "click #RechercheNonConformiteBouton": "rechercheNonConformite",
                "keyup #DateButoirDebutInput": "changeDateButoirDebut",
                "keyup #DateButoirFinInput": "changeDateButoirFin",
                "keyup #ResponsableNom": "changeResponsableNom",
                "click #IsNCEnCours": "changeIsNCEnCours",
                "click #IsNCCloture": "changeIsNCCloture",
                "click #ShowArchived": "changeShowArchived",
                "click #IsActionEnCours": "changeIsActionEnCours",
                "click #IsActionRealise": "changeIsActionRealise",
                "click #IsActionRetard": "changeIsActionRetard",
                "click #IsActionCloture": "changeIsActionCloture",
                "click #ActiveDirectoryActionResponsableRecherche": "showActiveDirectoryUtilisateurRecherche"

            }, 
            triggerRechercheSurEntree: function (e) {
                if (e.which === 13) {
                    if (viewModel.get('paramModel').get('typeRecherche') === 'NONCONFORMITE') {
                        Backbone.applicationEvents.trigger('rechercheNonConformite');
                    }
                    if (viewModel.get('paramModel').get('typeRecherche') === 'ACTION') {
                        Backbone.applicationEvents.trigger('recherche');
                    }
                }
            },
            rechercheNonConformite: function () {
                viewModel.get('rechercheNonConformiteParamModel').set({ 'typeRecherche': 'FICHESECURITE' });
                Backbone.applicationEvents.trigger('rechercheNonConformite');
            },
            recherche: function () {
                viewModel.get('rechercheNonConformiteParamModel').set({ 'typeRecherche': 'ACTION' });
                Backbone.applicationEvents.trigger('recherche');
            },
            changeResponsableNom: function (e) {
                this.model.get('rechercheNonConformiteParamModel').set({ 'ResponsableNom': $('#ResponsableNom').val() });
                this.model.get('rechercheNonConformiteParamModel').set({ 'ResponsableGuid': null });

                //this.triggerRechercheSurEntree(e);
            },
            changeDateButoirDebut: function (e) {
                this.model.get('rechercheNonConformiteParamModel').set({ 'DateButoirDebut': this.dateFormatMVC($('#DateButoirDebutInput').val()) + 'T' + '00:00:00.0' });
                this.model.get('rechercheNonConformiteParamModel').set({ 'DateButoirDebutJavascript': $('#DateButoirDebutInput').val() });

                //this.triggerRechercheSurEntree(e);
            },
            changeDateButoirFin: function (e) {
                this.model.get('rechercheNonConformiteParamModel').set({ 'DateButoirFin': this.dateFormatMVC($('#DateButoirFinInput').val()) + 'T' + '00:00:00.0' });
                this.model.get('rechercheNonConformiteParamModel').set({ 'DateButoirFinJavascript': $('#DateButoirFinInput').val() });

                //this.triggerRechercheSurEntree(e);
            },
            changeSite: function () {
                this.model.get('rechercheNonConformiteParamModel').set({ 'SiteId': parseInt($('#Site').val()) });
            },
            changeServiceType : function (){
                this.model.get('rechercheNonConformiteParamModel').set({ 'ServiceTypeId': parseInt($('#ServiceType').val()) });
            },
            changeOrigine: function () {
                this.model.get('rechercheNonConformiteParamModel').set({ 'NonConformiteOrigineId': parseInt($('#Origine').val()) });
            },
            changeDomaine: function () {
                this.model.get('rechercheNonConformiteParamModel').set({ 'NonConformiteDomaineId': parseInt($('#Domaine').val()) });
            },
            changeGravite: function () {
                this.model.get('rechercheNonConformiteParamModel').set({ 'NonConformiteGraviteId': parseInt($('#Gravite').val()) });
            },
            dateFormatMVC: dateTimeUtils.dateFormatMVC,
            changeIsNCEnCours: function(){
                this.model.get('rechercheNonConformiteParamModel').set({ 'IsNCEnCours': $('#IsNCEnCours').is(":checked") });
            },
            changeIsNCCloture: function(){
                this.model.get('rechercheNonConformiteParamModel').set({ 'IsNCCloture': $('#IsNCCloture').is(":checked") });
            },
            changeShowArchived: function(){
                this.model.get('rechercheNonConformiteParamModel').set({ 'ShowArchived': $('#ShowArchived').is(":checked") });
            },
            changeIsActionEnCours: function(){
                this.model.get('rechercheNonConformiteParamModel').set({ 'IsActionEnCours': $('#IsActionEnCours').is(":checked") });
            },
            changeIsActionRealise: function(){
                this.model.get('rechercheNonConformiteParamModel').set({ 'IsActionRealise': $('#IsActionRealise').is(":checked") });
            },
            changeIsActionRetard: function(){
                this.model.get('rechercheNonConformiteParamModel').set({ 'IsActionRetard': $('#IsActionRetard').is(":checked") });
            },
            changeIsActionCloture: function(){
                this.model.get('rechercheNonConformiteParamModel').set({ 'IsActionCloture': $('#IsActionCloture').is(":checked") });
            },
            showActiveDirectoryUtilisateurRecherche: function (ev) {
                //TODO :  Créer un constructeur prenant "sourceUtilisateurField" en param. pour créer ce qui suit
                var rechercheActiveDirectoryView = new window.RechercheActiveDirectoryView({
                });
                rechercheActiveDirectoryView.model.set({ "sourceUtilisateurField": $(ev.currentTarget).attr('data-SourceUtilisateurField') });
                if ($(ev.currentTarget).attr('data-actionid') != null) {
                    rechercheActiveDirectoryView.model.set({ "sourceId": $(ev.currentTarget).attr('data-actionid') })
                };
                rechercheActiveDirectoryView.show();
            },
            changeActionCode: function () {
                this.model.get('rechercheNonConformiteParamModel').set({ 'ActionCode': $('#ActionCode').val() });
            },
            changeNonConformiteCode: function () {
                this.model.get('rechercheNonConformiteParamModel').set({ 'NonConformiteCode': $('#NonConformiteCode').val() });
            }
        });



        var RechercheTableView = Backbone.View.extend({
            id: 'RechercheTableNonConformite',
            template: _.template($('#TableRecherche').html()),
            render: function () {
                this.$el.html(this.template(this.model.toJSON()));

                this.buildDataTable();

                return this;
            },
            initialize: function () {

                Backbone.applicationEvents.on('recherche', function () {
                    this.recherche();
                }, this);

                this.render();
            },
            events: {
                //"click #RechercheBouton": "recherche"

            },
            recherche: function () {
                viewModel.get('rechercheNonConformiteParamModel').set({ 'typeRecherche': 'ACTION' });
                this.render();
                //this.buildDataTable();
            },
            buildDataTable: function () {
                // /!\ Les fonctions d'ajout de 'datas' supplémentaires de DataTables ne fonctionnent pas très bien
                // Donc à chaque recherche, nous réinstancions le tableau
                // A chaque recherche, les paramètres de tri ne sont donc pas sauvegardés ... A voir si c'est grâve.

                $("#Table").DataTable().destroy();
                var datatableLength = datatableUtils.getDatatableLength();

                table = $("#Table").DataTable({
                    //dom: 'T<"clear">lfrtip',
                    dom: 'lf<"floatright"B>rtip',
                    buttons: [
                        'copy', 'excel'
                    ],
                    "scrollY": "400px",
                    "autoWidth": false,
                    "serverSide": true,
                    "processing": true,
                    "filter": false, 
                    "ajax": {
                        "url": "/api/ActionQSE",
                        "contentType": "application/json",
                        "data": {
                            "siteId": this.model.get('rechercheNonConformiteParamModel').get('SiteId'),
                            "serviceTypeId": this.model.get('rechercheNonConformiteParamModel').get('ServiceTypeId'),
                            "nonConformiteOrigineId": this.model.get('rechercheNonConformiteParamModel').get('NonConformiteOrigineId'),
                            "nonConformiteDomaineId": this.model.get('rechercheNonConformiteParamModel').get('NonConformiteDomaineId'),
                            "nonConformiteGraviteId": this.model.get('rechercheNonConformiteParamModel').get('NonConformiteGraviteId'),
                            "responsableNom": this.model.get('rechercheNonConformiteParamModel').get('ResponsableNom'),
                            "dateButoirDebut": this.model.get('rechercheNonConformiteParamModel').get('DateButoirDebut'),
                            "dateButoirFin": this.model.get('rechercheNonConformiteParamModel').get('DateButoirFin'),
                            "isActionEnCours": this.model.get('rechercheNonConformiteParamModel').get('IsActionEnCours'),
                            "isActionRealise": this.model.get('rechercheNonConformiteParamModel').get('IsActionRealise'),
                            "isActionRetard": this.model.get('rechercheNonConformiteParamModel').get('IsActionRetard'),
                            "isActionCloture": this.model.get('rechercheNonConformiteParamModel').get('IsActionCloture'),
                            "nonConformiteCode": this.model.get('rechercheNonConformiteParamModel').get('NonConformiteCode'),
                            "actionCode": this.model.get('rechercheNonConformiteParamModel').get('ActionCode'),
                            "showArchived": this.model.get('rechercheNonConformiteParamModel').get('ShowArchived')
                        }
                    },
                    "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Tous"]],
                    "pageLength": datatableLength,
                    "fnRowCallback": function (nRow, aData) {


                        var $nRow = $(nRow); // cache the row wrapped up in jQuery
                        //BLANC EN COURS
                        $('td:eq(0)', nRow).css({ "border-style": "solid", "border-width": "1px", "border-color": "#B4B4B4" });
                        var color = "white";
                        var colorHeavy = "white";
                        var colorLight = "white";

                        if (aData.RealiseDate !== null && aData.VerifieDate === null) {
                            colorHeavy = "#FFC000";
                            colorLight = "#FCE6A2";
                            $nRow.css({ "background-color": colorLight });
                            $('td:eq(0)', nRow).css({ "background-color": colorHeavy });
                        }
                       
                        if (aData.RealiseDate === null && aData.VerifieDate === null && new Date() > new Date(Date.parse(aData.DateButoireInitiale))) {
                            colorHeavy = "#FF0000";
                            colorLight = "#FFE7FF";
                            $nRow.css({ "background-color": colorLight });
                            $('td:eq(0)', nRow).css({ "background-color": colorHeavy });
                        }
                        //VERT VERIFIE
                        if (aData.RealiseDate !== null && aData.VerifieDate !== null) {
                            colorHeavy = "#00FF00";
                            colorLight = "#AFFDAF";
                            $nRow.css({ "background-color": colorLight });
                            $('td:eq(0)', nRow).css({ "background-color": colorHeavy });
                        }

                        $(nRow).hover(function () { 
                            $nRow.css({ "background-color": "#808181", "color": "white" });
                            $('td:eq(0)', nRow).css({ "background-color": colorHeavy, "color": "black" });
                        }, function () {
                            $nRow.css({ "background-color": colorLight, "color": "black" });
                            $('td:eq(0)', nRow).css({ "background-color": colorHeavy, "color": "black" });
                        });
                        return nRow;
                    },
                    "columns": [
                        {
                            "mData": "NonConformiteCode",
                            "sTitle": "Code Non-Conformite",
                            "orderable": true,
                            "width": "7%",
                            "mRender": function (date, type, full) {
                                return full.NonConformite.Code;
                            }
                        },
                        {
                            "mData": "Titre",
                            "sTitle": "Titre",
                            "orderable": false,
                            "width": "10%"
                        },
                        {
                            "mData": "NonConformiteDescription",
                            "sTitle": "Description Non-Conformite",
                            "orderable": false,
                            "width": "25%",
                            "mRender": function (date, type, full) {
                                return full.NonConformite.Description;
                            }
                        },
                        {
                            "mData": "Description",
                            "sTitle": "Description",
                            "orderable": false,
                            "visible": true, 
                            "width": "25%"
                        },
                        {
                            "mData": "Avancement",
                            "sTitle": "Avancement",
                            "orderable": false,
                            "visible": false,
                            "width": "25%"
                        },
                        {
                            "mData": "ResponsableNom",
                            "sTitle": "Responsable",
                            "orderable": true,
                            "width": "8%",
                            "mRender": function (date, type, full) {
                                return full.Responsable.Nom + ' ' + full.Responsable.Prenom;
                            }
                        },
                        {
                            "mData": "DateButoireInitiale",
                            "sTitle": "Date Butoir Initiale",
                            "sType": "date",
                            "mRender": function (date, type, full) {
                                return full.DateButoireInitiale.substring(8, 10) + '/' + full.DateButoireInitiale.substring(5, 7) + '/' + full.DateButoireInitiale.substring(0, 4);
                            },
                            "orderable": true,
                            "width": "6%"
                        },
                        {
                            "mData": "DateButoireNouvelle",
                            "sTitle": "Date Butoir Nouvelle",
                            "sType": "date",
                            "mRender": function (date, type, full) {
                                if (full.DateButoireNouvelle != null || full.DateButoireNouvelle == '') {
                                    return full.DateButoireNouvelle.substring(8, 10) + '/' + full.DateButoireNouvelle.substring(5, 7) + '/' + full.DateButoireNouvelle.substring(0, 4);
                                } else {
                                    return '';
                                }
                            },
                            "orderable": true,
                            "width": "6%"
                        },
                        {
                            "mData": "RealiseDate",
                            "sTitle": "Date de réalisation",
                            "sType": "date",
                            "mRender": function (date, type, full) {
                                if (full.RealiseDate === null || full.RealiseDate === undefined) {
                                     return "";
                                }
                                return full.RealiseDate.substring(8, 10) + '/' + full.RealiseDate.substring(5, 7) + '/' + full.RealiseDate.substring(0, 4);
                            },
                            "orderable": true,
                            "width": "6%",
                            "visible": false
                        },
                        {
                            "mData": "CritereEfficaciteVerification",
                            "sTitle": "Critère Vérification",
                            "orderable": false,
                            "visible": false
                        },
                        {
                            "mData": "CommentaireEfficaciteVerification",
                            "sTitle": "Commentaire Vérification",
                            "orderable": false,
                            "visible": false
                        },
                        {
                            "mData": "VerificateurNom",
                            "sTitle": "Verificateur",
                            "orderable": false,
                            "visible":false,
                            "mRender": function (date, type, full) {
                                return full.Verificateur.Nom + ' ' + full.Verificateur.Prenom;
                            }
                        },
                    ],
                    "oLanguage": {
                        "sUrl": "Scripts/datatables_lang_fr.js"
                    }
                });


                table.$('tr.selected').removeClass('selected');

                $('#Table tbody').on('mousedown', 'tr', function (e) {

                    // !!! Triche >> Pour raison X, le click sur un élément la ligne ou un élément de celle-ci se joue deux fois
                    // On n'active donc le code qu'une fois sur deux (Ce n'est pas une question de propagation Bubbling ... )
                    var i = 0;
                    i++
                    if (i % 2 > 0) {

                        if (e.button == 0) {

                            if (e.target.id == "deleteFicheSecurite") {

                                var id = e.target.getAttribute("data-id");
                                var confirmation = confirm("Êtes-vous sûr de vouloir supprimer cette Fiche Sécurité ?");
                                if (confirmation == true) {
                                    var ficheSecuriteToDeleteModel = new FicheSecuriteModel({ "FicheSecuriteID": id })
                                    ficheSecuriteToDeleteModel.destroy({
                                        async: false, wait: true,
                                        success: _.bind(function (model, repsonse) {
                                            //Backbone.applicationEvents.trigger('validFicheSecurite', 'la cause a été supprimée');
                                        }, this)
                                    });
                                    table.ajax.reload(null, false);
                                }
                            } else {
                                // CODE POUR OUVRIR DANS MEME FENETRE NE PAS SUPPRIMER
                                @*var aData = $("#Table").dataTable().fnGetData(this);
                                var url = '@Url.Action("Edit", "FicheSecurite", new { id = "__id__" })';
                                window.location.href = url.replace('__id__', aData.FicheSecuriteID);*@

                                var aData = $("#Table").dataTable().fnGetData(this);
                                var url = '@Url.Action("Edit", "NonConformite", new { id = "__id__" })';
                                var realUrl = url.replace('__id__', aData.NonConformiteId)
                                window.open(realUrl, "_blank");
                            }
                        }

                        e.preventDefault();

                        if (e.button == 2 || e.button == 1) {
                            var aData = $("#Table").dataTable().fnGetData(this);
                            var url = '@Url.Action("Edit", "NonConformite", new { id = "__id__" })';
                            var realUrl = url.replace('__id__', aData.NonConformiteId)
                            window.open(realUrl, "_blank");
                        }

                    }
                }); 

            }
        });

        var RechercheNonConformiteTableView = Backbone.View.extend({
            id: 'RechercheTableFicheSecurite',
            template: _.template($('#TableRecherche').html()),
            render: function () {
                this.$el.html(this.template(this.model.toJSON()));

                this.buildDataTable();

                return this;
            },
            initialize: function () {

                Backbone.applicationEvents.on('rechercheNonConformite', function () {
                    this.rechercheNonConformite();
                }, this);

            },
            events: {
                // "click #RechercheNonConformiteBouton": "rechercheNonConformite"
            },            
            rechercheNonConformite: function () {
                viewModel.get('rechercheNonConformiteParamModel').set({ 'typeRecherche': 'NONCONFORMITE' });
                this.render();
                //this.buildDataTable();
            },
            buildDataTable: function () {
                // /!\ Les fonctions d'ajout de 'datas' supplémentaires de DataTables ne fonctionnent pas très bien
                // Donc à chaque recherche, nous réinstancions le tableau
                // A chaque recherche, les paramètres de tri ne sont donc pas sauvegardés ... A voir si c'est grâve.

                $("#Table").DataTable().destroy();
                var datatableLength = datatableUtils.getDatatableLength();

                table = $("#Table").DataTable({
                    dom: 'lf<"floatright"B>rtip',
                    buttons: [
                        'copy', 'excel'
                    ],
                    "scrollY": "400px",
                    "autoWidth": false,
                    "serverSide": true,
                    "processing": true,
                    "filter": false,
                    "ajax": {
                        "url": "/api/NonConformite",
                        "data": {
                            "siteId": this.model.get('rechercheNonConformiteParamModel').get('SiteId'),
                            "serviceTypeId": this.model.get('rechercheNonConformiteParamModel').get('ServiceTypeId'),
                            "nonConformiteOrigineId": this.model.get('rechercheNonConformiteParamModel').get('NonConformiteOrigineId'),
                            "nonConformiteDomaineId": this.model.get('rechercheNonConformiteParamModel').get('NonConformiteDomaineId'),
                            "nonConformiteGraviteId": this.model.get('rechercheNonConformiteParamModel').get('NonConformiteGraviteId'),
                            "responsableNom": this.model.get('rechercheNonConformiteParamModel').get('ResponsableNom'),
                            "dateButoirDebut": this.model.get('rechercheNonConformiteParamModel').get('DateButoirDebut'),
                            "dateButoirFin": this.model.get('rechercheNonConformiteParamModel').get('DateButoirFin'),
                            "isNCEnCours": this.model.get('rechercheNonConformiteParamModel').get('IsNCEnCours'),
                            "isNCCloture": this.model.get('rechercheNonConformiteParamModel').get('IsNCCloture'),
                            "showArchived": this.model.get('rechercheNonConformiteParamModel').get('ShowArchived'),
                            "nonConformiteCode": this.model.get('rechercheNonConformiteParamModel').get('NonConformiteCode')
                        }

                    },
                    "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Tous"]],
                    "pageLength": datatableLength,
                    "fnRowCallback": function (nRow, aData) {
                        var $nRow = $(nRow); // cache the row wrapped up in jQuery

                        $('td:eq(0)', nRow).css({ "border-style": "solid", "border-width": "1px", "border-color": "#B4B4B4" });
                        var color = "white";
                        var colorHeavy = "white";
                        var colorLight = "white";

                        var isCloture = true;
                        var nbAction = 0;
                        
             
                        for (var action in aData.ActionQSEs) {
                            nbAction++; 
                            if (typeof aData.ActionQSEs[action].VerifieDate === 'undefined' || aData.ActionQSEs[action].VerifieDate === null) {
                                isCloture = false;
                            }
                        }
                         
                        if (isCloture == true && nbAction > 0) {
                            colorHeavy = "#00FF00";
                            colorLight = "#AFFDAF";
                            $nRow.css({ "background-color": colorLight });
                            $('td:eq(0)', nRow).css({ "background-color": colorHeavy });
                        } 

                        $(nRow).hover(function () {
                            //$nRow.css({ "background-color": "#EAEAEA" });
                            $nRow.css({ "background-color": "#808181", "color": "white" });
                            $('td:eq(0)', nRow).css({ "background-color": colorHeavy, "color": "black" });
                        }, function () {
                            $nRow.css({ "background-color": colorLight, "color": "black" });
                            $('td:eq(0)', nRow).css({ "background-color": colorHeavy, "color": "black" });
                        });
                        return nRow;
                    },
                    "columns": [
                        {
                            "mData": "Id",
                            "sTitle": "Id",
                            "visible": false,
                            "orderable": false,
                        },
                        {
                            "mData": "Code",
                            "sTitle": "Code",
                            "orderable": true,
                            "width": "10%"
                        },
                        {
                            "mData": "Site.Nom",
                            "sTitle": "Site",
                            "visible": false,
                        },
                        {
                            "mData": "Date",
                            "sTitle": "Date",
                            "sType": "date",
                            "mRender": function (date, type, full) { 
                                return dateTimeUtils.dateFormatJS(date);
                            },
                            "orderable": true,
                            "width": "10%"
                        },
                        {
                            "mData": "NonConformiteDomaine.Nom",
                            "sTitle": "Domaine",
                            "visible": false,
                        },
                        {
                            "mData": "NonConformiteOrigine.Nom",
                            "sTitle": "Origine",
                            "orderable": true,
                            "width": "15%"
                        },
                        {
                            "mData": "NonConformiteGravite.Nom",
                            "sTitle": "Gravité",
                            "visible": false,
                        },
                        {
                            "mData": "Description",
                            "sTitle": "Description",
                            "orderable": false
                        },
                        {
                            "mData": "Attendu",
                            "sTitle": "Attendu",
                            "visible": false,
                        },
                        {
                            "mData": "Cause",
                            "sTitle": "Cause",
                            "visible": false,
                        }
                    ],
                    "oLanguage": {
                        "sUrl": "Scripts/datatables_lang_fr.js"
                    }
                });


                table.$('tr.selected').removeClass('selected');

                $('#Table tbody').on('mousedown', 'tr', function (e) {

                    // !!! Triche >> Pour raison X, le click sur un élément la ligne ou un élément de celle-ci se joue deux fois
                    // On n'active donc le code qu'une fois sur deux (Ce n'est pas une question de propagation Bubbling ... )
                    var i = 0;
                    i++
                    if (i % 2 > 0) {

                        if (e.button == 0) {

                            if (e.target.id == "deleteNonConformite") {

                                var id = e.target.getAttribute("data-id");
                                var confirmation = confirm("Êtes-vous sûr de vouloir supprimer cette Non-Conformité ?");
                                if (confirmation == true) {
                                    var nonConformiteToDeleteModel = new NonConformiteModel({ "Id": id })
                                    nonConformiteToDeleteModel.destroy({
                                        async: false, wait: true,
                                        success: _.bind(function (model, repsonse) {
                                            //Backbone.applicationEvents.trigger('validFicheSecurite', 'la cause a été supprimée');
                                        }, this)
                                    });
                                    table.ajax.reload(null, false);
                                }
                            } else {
                                // CODE POUR OUVRIR DANS MEME FENETRE NE PAS SUPPRIMER
                                @*var aData = $("#Table").dataTable().fnGetData(this);
                                var url = '@Url.Action("Edit", "FicheSecurite", new { id = "__id__" })';
                                window.location.href = url.replace('__id__', aData.FicheSecuriteID);*@

                                var aData = $("#Table").dataTable().fnGetData(this);
                                var url = '@Url.Action("Edit", "NonConformite", new { id = "__id__" })';
                                var realUrl = url.replace('__id__', aData.Id)
                                window.open(realUrl, "_blank");
                            }
                        }

                        e.preventDefault();

                        if (e.button == 2 || e.button == 1) {
                            var aData = $("#Table").dataTable().fnGetData(this);
                            var url = '@Url.Action("Edit", "NonConformite", new { id = "__id__" })';
                            var realUrl = url.replace('__id__', aData.Id)
                            window.open(realUrl, "_blank");
                        }

                    }
                });  
            }
        });




        var filtreTableView = new FiltreTableView({
            el: $("#TableFiltreDiv"),
            model: viewModel
        });

        var rechercheTableView = new RechercheTableView({
            el: $("#TableRechercheDiv"),
            model: viewModel
        });

        var rechercheNonConformiteTableView = new RechercheNonConformiteTableView({
            el: $("#TableRechercheDiv"),
            model: viewModel
        });

    });


</script>

